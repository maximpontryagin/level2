package pattern

import "fmt"

/*
	Реализовать паттерн «фасад».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Facade_pattern
*/

/*
Применимость:
1. Упрощение интерфейса к сложной системе: Когда система состоит из множества сложных и взаимосвязанных
элементов, фасад предоставляет простой интерфейс для её использования.
2. Разделение кода: Позволяет отделить сложную логику системы от клиентов, которые её используют.

Плюсы:
1. Изолирует клиентов от системы, т.е. скрывает сложную логику от пользователей.

Минусы:
1. Фасад рискует стать супер объектом или "божественным" объектом, привязанным ко всем функциям программы.
Т.е. все новые функции будут проходить через фасад.

Примеры:
1. Оплата в интернет магазине. Фасад — он позволяет клиенту работать с десятками компонентов,
используя при этом простой интерфейс. Клиенту необходимо лишь ввести реквизиты карты, код безопасности,
стоимость оплаты и тип операции. Фасад управляет дальнейшей коммуникацией между различными
компонентами без контакта клиента со сложными внутренними механизмами.

2. Различные фреймворки. Они реализуют сложную логику и дают нам(клиентам) легкий доступ к ним через понятный интерфейс.

Мой пример:
К системе умный дом подключены телевизор, кондиционер и освещение. Каждый из элементов содержит сложную
для пользователя логику. Предоставим пользователю простой и понятный интерфейс для включения и выключения
всех устройств одновременно. Это упростит пользователю управление умными устройствами и скроет детали их реализации.
*/

// Телевизор представляет телевизор в доме
type Television struct{}

// Включает телевизор
func (t *Television) On() {
	fmt.Println("Включение телевизора")
}

// Выключает телевизор
func (t *Television) Off() {
	fmt.Println("Выключение телевизора")
}

// Кондиционер представляет кондиционер в доме
type AirConditioner struct{}

// Включает кондиционер
func (ac *AirConditioner) On() {
	fmt.Println("Включение кондиционера")
}

// Выключает кондиционер
func (ac *AirConditioner) Off() {
	fmt.Println("Выключение кондиционера")
}

// Свет представляет освещение в доме
type Light struct{}

// Включает свет
func (l *Light) On() {
	fmt.Println("Включение света")
}

// Выключает свет
func (l *Light) Off() {
	fmt.Println("Выключение света")
}

// Реализация фасада

// ДомашнийФасад предоставляет структуру для работы с домашними подсистемами
type HomeFacade struct {
	tv    *Television
	ac    *AirConditioner
	light *Light
}

// Создает новый экземпляр домашнего фасада и инициализирует подсистемы
func NewHomeFacade() *HomeFacade {
	return &HomeFacade{
		tv:    &Television{},
		ac:    &AirConditioner{},
		light: &Light{},
	}
}

// Метод, который включит свет, телевизор и кондиционер при приходе домой
func (h *HomeFacade) ArriveHome() {
	fmt.Println("Пришел домой...")
	h.light.On()
	h.tv.On()
	h.ac.On()
}

// Метод, который выключит свет, телевизор и кондиционер при уходе из дома
func (h *HomeFacade) LeaveHome() {
	fmt.Println("Ушел из дома...")
	h.light.Off()
	h.tv.Off()
	h.ac.Off()
}

// Используем фасад

func main() {
	// Создаем новый экземпляр фасада
	home := NewHomeFacade()

	// Симулируем приход домой
	home.ArriveHome()

	// Симулируем уход из дома
	home.LeaveHome()
}
