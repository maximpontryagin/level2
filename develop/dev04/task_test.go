package main

import (
	"reflect"
	"testing"
)

func TestSearchAnagram(t *testing.T) {
	// Подготовка тестовых данных
	tests := []struct {
		name     string
		words    []string
		expected map[string][]string
	}{
		{
			name:  "Базовый тест с анаграммами",
			words: []string{"пятак", "пятка", "тяпка", "листок", "слиток", "столик"},
			expected: map[string][]string{
				"пятак":  {"пятак", "пятка", "тяпка"},
				"листок": {"листок", "слиток", "столик"},
			},
		},
		{
			name:  "Тест на проверку регистра",
			words: []string{"Пятак", "пятка", "Тяпка", "Листок", "слиток", "Столик"},
			expected: map[string][]string{
				"пятак":  {"пятак", "пятка", "тяпка"},
				"листок": {"листок", "слиток", "столик"},
			},
		},
		{
			name:  "Проверка, что множество из одного элемента не попадает в результат",
			words: []string{"кот", "собака", "пятак", "пятка", "тяпка"},
			expected: map[string][]string{
				"пятак": {"пятак", "пятка", "тяпка"},
			},
		},
	}

	// Итерируемся по списку тестов
	for _, test := range tests {
		// создаем новый под-тест с именем test.name(помагает легко ориентировать в результатах тестов),
		// который выполняет переданную ему функцию.
		t.Run(test.name, func(t *testing.T) {
			result := searchAnagram(test.words)
			//  reflect.DeepEqual может сравнивать более сложные структуры, такие как срезы, карты, структуры и т.д.
			// Глубокое сравнение: выполняет рекурсивное сравнение всех полей и элементов в структурах, срезах и картах.
			// Это означает, что если значения содержат вложенные структуры, все вложенные значения будут также сравниваться.
			if !reflect.DeepEqual(result, test.expected) {
				t.Errorf("ожидалось: %v, получилось: %v", test.expected, result)
			}
		})
	}
}
